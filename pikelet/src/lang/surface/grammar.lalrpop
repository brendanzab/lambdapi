use crate::lang::Ranged;
use crate::lang::surface::{Term, TermData, Literal, TypeEntry, TermEntry};
use crate::lang::surface::lexer::Token;
use crate::reporting::LexerError;

grammar<'input>;

extern {
    type Location = usize;
    type Error = LexerError;

    enum Token<'input> {
        "doc comment" => Token::DocComment(<&'input str>),
        "character literal" => Token::CharLiteral(<&'input str>),
        "string literal" => Token::StrLiteral(<&'input str>),
        "numeric literal" => Token::NumLiteral(<&'input  str>),
        "name" => Token::Name(<&'input str>),
        "shift" => Token::Shift(<&'input str>),

        "as" => Token::As,
        "fun" => Token::FunTerm,
        "Fun" => Token::FunType,
        "record" => Token::RecordTerm,
        "Record" => Token::RecordType,

        "->"  => Token::Arrow,
        "=>"  => Token::DArrow,
        ":"   => Token::Colon,
        ","   => Token::Comma,
        "."   => Token::Dot,

        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "[" => Token::LBrack,
        "]" => Token::RBrack,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "=" => Token::Equal,
    }
}

pub Term: Term = Ranged<TermData>;
ArrowTerm: Term = Ranged<ArrowTermData>;
ExprTerm: Term = Ranged<ExprTermData>;
AppTerm: Term = Ranged<AppTermData>;
AtomicTerm: Term = Ranged<AtomicTermData>;

TermData: TermData = {
    ExprTermData,
    <term: ExprTerm> ":" <ty: Term> => TermData::Ann(Box::new(term), Box::new(ty)),
};

ExprTermData: TermData = {
    ArrowTermData,
    "fun" <input_names: Ranged<Name>+> "=>" <output_term: ExprTerm> => {
        TermData::FunctionTerm(input_names, Box::new(output_term))
    },
};

ArrowTermData: TermData = {
    AppTermData,
    "Fun" <input_type_groups: ("(" <Ranged<Name>+> ":" <ArrowTerm> ")")+>
        "->" <output_type: ArrowTerm> =>
    {
        TermData::FunctionType(input_type_groups, Box::new(output_type))
    },
    <input_type: AppTerm> "->" <output_type: ArrowTerm> => {
        TermData::FunctionArrowType(Box::new(input_type), Box::new(output_type))
    },
};

AppTermData: TermData = {
    AtomicTermData,
    <head_term: AtomicTerm> <input_terms: AtomicTerm+> => {
        TermData::FunctionElim(Box::new(head_term), input_terms)
    },
};

AtomicTermData: TermData = {
    "(" <term: TermData> ")" => term,
    <name: Name> => TermData::Name(name),
    <term: AtomicTerm> <shift: "shift"> => {
        TermData::Lift(Box::new(term), shift[1..].parse().unwrap()) // FIXME: Overflow!
    },
    "Record" "{" <entries: List<TypeEntry>> "}" => TermData::RecordType(entries),
    "record" "{" <entries: List<TermEntry>> "}" => TermData::RecordTerm(entries),
    <head_term: AtomicTerm> "." <label: Ranged<Name>> => TermData::RecordElim(Box::new(head_term), label),
    "[" <entries: List<Term>> "]" => TermData::Sequence(entries),
    <literal: Literal> => TermData::Literal(literal),
};

List<Entry>: Vec<Entry> = {
    <mut entries: (<Entry> ",")*> <last: Entry?> => {
        entries.extend(last);
        entries
    }
}

TypeEntry: TypeEntry = {
    // TODO: Use doc comments
    <_docs: "doc comment"*>
    <label: Ranged<Name>> <name: ("as" <Ranged<Name>>)?> ":" <term: Term> => (label, name.to_owned(), term),
};

TermEntry: TermEntry = {
    // TODO: Use doc comments
    <_docs: "doc comment"*> <label: Ranged<Name>> "=" <term: Term> => (label.to_owned(), term),
};

Name: String = {
    "name" => (<>).to_owned(),
};

Literal: Literal = {
    "character literal" => Literal::Char(<>.to_owned()),
    "string literal" => Literal::String(<>.to_owned()),
    "numeric literal" => Literal::Number(<>.to_owned()),
};

Ranged<T>: Ranged<T> = {
    <start: @L> <data: T> <end: @R> => Ranged::new(start..end, data),
};
