-- TODO: type annotations for record terms
record {
    id = fun A a => a,
    always = fun A B a b => a,

    dep-compose = fun A B C a-b a-b-c a => a-b-c a (a-b a),
    compose = fun A B C a-b b-c a => b-c (a-b a),
    -- FIXME: Variable binding bug
    -- compose = fun A B C => dep-compose A (fun a => B) (fun a b => C),
    -- compose = fun A B C => dep-compose A (always B) (always (always C)),

    dep-flip = fun A B C a-b-c b a => a-b-c a b,
    flip = fun A B C => dep-flip A B (fun a b => C),
    -- FIXME: Variable binding bug
    -- flip = fun A B C => dep-flip A B (always (always C)),

    dep-subst = fun A B C a-b-c a-b a => a-b-c a (a-b a),
    subst = fun A B C => dep-subst A (fun a => B) (fun a b => C),
    -- FIXME: Variable binding bug
    -- subst = fun A B C => dep-subst A (always B) (always (always C)),

    Unit = Record {},
    unit = record {},

    Prod = fun A B => Fun (a : A) -> B a,
    Sum = fun A B => Record { val : A, proof : B val },

    Semigroup = Record {
        ||| The carrier type
        Carrier : Type,
        ||| The associative operation
        append : Carrier -> Carrier -> Carrier,
    },

    Category = Record {
        ||| An object in the category
        Object : Type,
        ||| Arrows between the objects in the category
        Arrow : Object -> Object -> Type,
        ||| The identity arrow
        id : Fun (A : Object) -> Arrow A A,
        ||| The sequencing of two arrows
        seq : Fun (A B C : Object) -> Arrow A B -> Arrow B C -> Arrow A C,
    },

    -- FIXME: level shifts for record fields
    -- category-pikelet = record {
    --     Object = Type,
    --     Arrow = fun A B => A -> B,
    --     -- TODO: Use combinator definitions
    --     id = fun A a => a,
    --     seq = fun A B C a-b b-c a => b-c (a-b a),
    -- },
} : Record {
    ||| The polymorphic identity function.
    id : Fun (A : Type) -> A -> A,

    ||| Creates a function that always returns the same value.
    always : Fun (A B : Type) -> A -> B -> A,


    ||| Dependent function composition.
    dep-compose :
        Fun (A : Type)
            (B : A -> Type)
            (C : Fun (a : A) -> B a -> Type)
            (a-b : Fun (a : A) -> B a)
            (a-b-c : Fun (a : A) (b : B a) -> C a b)
            -> (Fun (a : A) -> C a (a-b a)),

    ||| Function composition.
    compose : Fun (A B C : Type) -> (A -> B) -> (B -> C) -> (A -> C),


    ||| Flip the order of the first two inputs to a dependent function.
    dep-flip :
        Fun (A B : Type)
            (C : A -> B -> Type)
            (a-b-c : Fun (a : A) (b : B) -> C a b)
            -> (Fun (b : B) (a : A) -> C a b),

    ||| Flip the order of the first two inputs to a function
    flip : Fun (A B C : Type) -> (A -> B -> C) -> (B -> A -> C),


    ||| Dependent substitution.
    |||
    ||| Takes three inputs and then returns the first input applied to the third,
    ||| which is then applied to the result of the second input applied to the third.
    |||
    ||| Also known as the 'S Combinator' in the [SKI combinator calculus][ski-wiki].
    |||
    ||| # References
    |||
    ||| - [Outrageous but Meaningful Coincidences: Dependent type-safe syntax and evaluation][dep-rep]
    |||   (Described in Section 5 as an infix `_Ë¢_` operator)
    |||
    ||| [ski-wiki]: https://en.wikipedia.org/wiki/SKI_combinator_calculus
    ||| [dep-rep]: https://personal.cis.strath.ac.uk/conor.mcbride/pub/DepRep/DepRep.pdf
    dep-subst :
        Fun (A : Type)
            (B : A -> Type)
            (C : Fun (a : A) -> B a -> Type)
            (a-b-c : Fun (a : A) (b : B a) -> C a b)
            (a-b : Fun (a : A) -> B a)
            -> (Fun (a : A) -> C a (a-b a)),

    ||| Substitution.
    subst : Fun (A B C : Type) -> (A -> B -> C) -> (A -> B) -> (A -> C),


    ||| The unit type
    |||
    ||| This is a synonym for the empty record, and can be constructed using the
    ||| `unit` function.
    Unit : Type,

    ||| Create an element of the `Unit` type
    unit : Unit,


    ||| Dependent products
    Prod : Fun (A : Type) (B : A -> Type) -> Type,

    ||| Dependent sums (subtypes)
    Sum : Fun (A : Type) (B : A -> Type) -> Type,


    ||| A carrier equipped with an associative operation
    Semigroup : Type^1,

    ||| A category is a very general structure that provides a common way of
    ||| composing units of functionality
    |||
    ||| The most common category programmers would be familiar with would be `Type`s
    ||| are the objects, and the functions between those types are the arrows. Many
    ||| other categories exist though, for example:
    |||
    ||| - nodes in a directed graph, and the edges between those nodes.
    ||| - etc.
    Category : Type^1,

    -- FIXME: level shifts for record fields
    -- ||| Category of Pikelet functions and types.
    -- category-pikelet : Category^1,
}
