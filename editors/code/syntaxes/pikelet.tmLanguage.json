{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Pikelet",
    "patterns": [
        {
            "include": "#keywords"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#primitives"
        },
        {
            "include": "#identifiers"
        },
        {
            "include": "#strings"
        }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.pikelet",
                    "match": "\\b(as|case|data|Data|else|if|import|in|let|record|Record|then|Type|where)\\b"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.pikelet",
                    "match": "--.*$"
                },
                {
                    "name": "comment.block.documentation.pikelet",
                    "match": "\\|\\|\\|.*$"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "name": "punctuation.pikelet",
                    "match": ";|\\(|\\)|\\{|\\}|\\[|\\]"
                },
                {
                    "name": "keyword.operator",
                    "match": ":|=|\\.|->"
                }
            ]
        },
        "primitives": {
            "patterns": [
                {
                    "name": "support.type.primitive.pikelet",
                    "match": "\\b(Bool|Char|String|Array|U8|U16|U32|U64|S8|S16|S32|S64|F32|F64)(\\^[0-9]+)?\\b"
                },
                {
                    "name": "support.constant.pikelet",
                    "match": "\\b(true|false)\\b"
                }
            ]
        },
        "identifiers": {
            "patterns": [
                {
                    "name": "source.pikelet",
                    "match": "[A-Za-z_\\-][0-9A-Za-z_\\-]*(\\^[0-9]+)?"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.pikelet",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.pikelet",
                    "match": "\\\\."
                }
            ]
        }
    },
    "scopeName": "source.pikelet"
}
