use codespan::FileMap;
use codespan::{ByteIndex, ByteSpan};

use concrete::{Item, Literal, Pattern, Term, RecordTypeField, RecordField, ReplCommand, VariantTypeField};
use parse::{LalrpopError, ParseError, Token};
use {FloatFormat, IntFormat};

#[LALR]
grammar<'err, 'input>(
    import_paths: &mut Vec<String>,
    errors: &'err mut Vec<ParseError>,
    filemap: &'input FileMap,
);

extern {
    type Location = ByteIndex;
    type Error = ParseError;

    enum Token<&'input str> {
        // Data
        "identifier" => Token::Ident(<&'input str>),
        "doc comment" => Token::DocComment(<&'input str>),
        "REPL command" => Token::ReplCommand(<&'input str>),
        "string literal" => Token::StringLiteral(<String>),
        "character literal" => Token::CharLiteral(<char>),
        "binary literal" => Token::BinIntLiteral(<u64>),
        "octal literal" => Token::OctIntLiteral(<u64>),
        "decimal literal" => Token::DecIntLiteral(<u64>),
        "hex literal" => Token::HexIntLiteral(<u64>),
        "float literal" => Token::DecFloatLiteral(<f64>),

        // Keywords
        "as" => Token::As,
        "case" => Token::Case,
        "data" => Token::Data,
        "Data" => Token::DataType,
        "else" => Token::Else,
        "if" => Token::If,
        "import" => Token::Import,
        "in" => Token::In,
        "let" => Token::Let,
        "record" => Token::Record,
        "Record" => Token::RecordType,
        "then" => Token::Then,
        "Type" => Token::Type,
        "where" => Token::Where,

        // Symbols
        "\\" => Token::BSlash,
        "^" => Token::Caret,
        ":" => Token::Colon,
        "," => Token::Comma,
        "." => Token::Dot,
        ".." => Token::DotDot,
        "=" => Token::Equal,
        "->" => Token::LArrow,
        "=>" => Token::LFatArrow,
        "?" => Token::Question,
        ";" => Token::Semi,

        // Delimiters
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
    }
}

pub ReplCommand: ReplCommand = {
    => ReplCommand::NoOp,
    <term: Term> => ReplCommand::Eval(Box::new(term)),
    <start: @L> <command: "REPL command"> <end: @R> =>? match command {
        "?" | "h" | "help" => Ok(ReplCommand::Help),
        "q" | "quit" => Ok(ReplCommand::Quit),
        command => {
            let span = ByteSpan::new(start, end);
            let command = command.to_owned();
            Err(LalrpopError::User { error: ParseError::UnknownReplCommand { span, command} })
        },
    },
    <start: @L> <command: "REPL command"> <end: @R> <term: Term> =>? match command {
        "raw" => Ok(ReplCommand::Raw(Box::new(term))),
        "core" => Ok(ReplCommand::Core(Box::new(term))),
        "t" | "type" => Ok(ReplCommand::TypeOf(Box::new(term))),
        command => {
            let span = ByteSpan::new(start, end);
            let command = command.to_owned();
            Err(LalrpopError::User { error: ParseError::UnknownReplCommand { span, command} })
        },
    },
    <start: @L> <command: "REPL command"> <end: @R> <ident: Ident> "=" <term: Term> =>? match command {
        "let" => Ok(ReplCommand::Let(ident, Box::new(term))),
        command => {
            let span = ByteSpan::new(start, end);
            let command = command.to_owned();
            Err(LalrpopError::User { error: ParseError::UnknownReplCommand { span, command} })
        },
    },
};

Item: Item = {
    <_comment: "doc comment"*> <name: IndexedIdent> ":" <ann: Term> ";" => {
        Item::Declaration { name, ann }
    },
    <_comment: "doc comment"*> <name: IndexedIdent> <params: AtomicLamParam*> <return_ann: (":" <Term>)?> "="
        <body: Term> ";" =>
    {
        Item::Definition { name, params, return_ann: return_ann.map(Box::new), body }
    },
    <start: @L> <recovered: !> <end: @R> ";" => {
        errors.push(super::errors::from_lalrpop(filemap, recovered.error));
        Item::Error(ByteSpan::new(start, end))
    },
};

Literal: Literal = {
    <start: @L> <value: "string literal"> <end: @R> => Literal::String(ByteSpan::new(start, end), value),
    <start: @L> <value: "character literal"> <end: @R> => Literal::Char(ByteSpan::new(start, end), value),
    <start: @L> <value: "binary literal"> <end: @R> => Literal::Int(ByteSpan::new(start, end), value, IntFormat::Bin),
    <start: @L> <value: "octal literal"> <end: @R> => Literal::Int(ByteSpan::new(start, end), value, IntFormat::Oct),
    <start: @L> <value: "decimal literal"> <end: @R> => Literal::Int(ByteSpan::new(start, end), value, IntFormat::Dec),
    <start: @L> <value: "hex literal"> <end: @R> => Literal::Int(ByteSpan::new(start, end), value, IntFormat::Hex),
    <start: @L> <value: "float literal"> <end: @R> => Literal::Float(ByteSpan::new(start, end), value, FloatFormat::Dec),
};

pub Pattern: Pattern = {
    AtomicPattern,
    <pattern: Pattern> ":" <ty: LamTerm> => {
        Pattern::Ann(Box::new(pattern), Box::new(ty))
    }
};

AtomicPattern : Pattern = {
    <start: @L> "(" <pattern: Pattern> ")" <end: @R> => {
        Pattern::Parens(ByteSpan::new(start, end), Box::new(pattern))
    },
    <literal: Literal> => Pattern::Literal(literal),
    <start: @L> <ident: Ident> <shift: ("^" <"decimal literal">)?> <end: @R> => {
        Pattern::Name(ByteSpan::new(start, end), ident, shift.map(|x| x as u32)) // FIXME: underflow?
    },
    <start: @L> <recovered: !> <end: @R> => {
        errors.push(super::errors::from_lalrpop(filemap, recovered.error));
        Pattern::Error(ByteSpan::new(start, end))
    },
}

pub Term: Term = {
    LamTerm,
    <expr: LamTerm> ":" <ty: Term> => {
        Term::Ann(Box::new(expr), Box::new(ty))
    },
    <expr: LamTerm> "where" "{" <items: Item+> "}" <end: @R> => {
        Term::Where(Box::new(expr), items, end)
    }
};

LamTerm: Term = {
    PiTerm,
    <start: @L> "import" <path_start: @L> <path: "string literal"> <end: @R> => {
        import_paths.push(path.clone());
        Term::Import(ByteSpan::new(start, end), ByteSpan::new(path_start, end), path)
    },
    <start: @L> "\\" <name: IndexedIdent> ":" <ann: PiTerm> "=>" <body: LamTerm> => {
        Term::Lam(start, vec![(vec![name], Some(Box::new(ann)))], Box::new(body))
    },
    <start: @L> "\\" <params: AtomicLamParam+> "=>" <body: LamTerm> => {
        Term::Lam(start, params, Box::new(body))
    },
    <start: @L> "if" <cond: AppTerm> "then" <if_true: AppTerm> "else" <if_false: AppTerm> => {
        Term::If(start, Box::new(cond), Box::new(if_true), Box::new(if_false))
    },
    <start: @L> "case" <head: AppTerm> "{" <arms: (<PatternArm> ";")*> <last: PatternArm?> "}" <end: @R> => {
        let mut arms = arms;
        arms.extend(last);
        Term::Case(ByteSpan::new(start, end), Box::new(head), arms)
    },
    <start: @L> "let" <items: Item+> "in" <body: LamTerm> => {
        Term::Let(start, items, Box::new(body))
    },
};

PiTerm: Term = {
    AppTerm,
    // Naively we would want to write the following rules:
    //
    // ```lalrpop
    // <params: ("(" <IndexedIdent+> ":" <PiTerm> ")")+> "->" <body: LamTerm> => {
    //      Term::Pi(params, Box::new(body))
    //  },
    //  <ann: AppTerm> "->" <body: LamTerm> => {
    //      Term::Arrow(Box::new(ann), Box::new(body))
    //  },
    // ```
    //
    // Alas this causes an ambiguity with the `AtomicTerm` rule. Therefore we
    // have to hack this in by reparsing the binder:
    <start: @L> <binder: AppTerm> "->" <body: LamTerm> <end: @R> =>? {
        super::reparse_pi_type_hack(ByteSpan::new(start, end), binder, body)
    },
};

AppTerm: Term = {
    AtomicTerm,
    <head: AtomicTerm> <args: AtomicTerm+> => Term::App(Box::new(head), args),
};

AtomicTerm: Term = {
    <start: @L> "(" <term: Term> ")" <end: @R> => Term::Parens(ByteSpan::new(start, end), Box::new(term)),
    <start: @L> "Type" <level: ("^" <"decimal literal">)?> <end: @R> => {
        Term::Universe(ByteSpan::new(start, end), level.map(|x| x as u32)) // FIXME: underflow?
    },
    <literal: Literal> => Term::Literal(literal),
    <start: @L> "[" <elems: (<Term> ";")*> <last: Term?> "]" <end: @R> => {
        let mut elems = elems;
        elems.extend(last);
        Term::Array(ByteSpan::new(start, end), elems)
    },
    <start: @L> "?" <end: @R> => Term::Hole(ByteSpan::new(start, end)),
    <start: @L> <ident: Ident> <shift: ("^" <"decimal literal">)?> <end: @R> => {
        Term::Name(ByteSpan::new(start, end), ident, shift.map(|x| x as u32)) // FIXME: underflow?
    },
    <start: @L> "Record" "{" <fields: (<RecordTypeField> ";")*> <last: RecordTypeField?> "}" <end: @R> => {
        let mut fields = fields;
        fields.extend(last);
        Term::RecordType(ByteSpan::new(start, end), fields)
    },
    <start: @L> "record" "{" <fields: (<RecordField> ";")*> <last: RecordField?> "}" <end: @R> => {
        let mut fields = fields;
        fields.extend(last);
        Term::Record(ByteSpan::new(start, end), fields)
    },
    <start: @L> "Data" "{" <variants: (<VariantTypeField> ";")*> <last: VariantTypeField?> "}" <end: @R> => {
        let mut variants = variants;
        variants.extend(last);
        Term::VariantType(ByteSpan::new(start, end), variants)
    },
    <start: @L> "data" "{" <label: Ident> "=" <term: Term> "}" <end: @R> => {
        Term::Variant(ByteSpan::new(start, end), label, Box::new(term))
    },
    <start: @L> <term: AtomicTerm> "." <label_start: @L> <label: Ident> <shift: ("^" <"decimal literal">)?> <end: @R> => {
        Term::Proj(ByteSpan::new(start, end), Box::new(term), label_start, label, shift.map(|x| x as u32))
    },
    <start: @L> <recovered: !> <end: @R> => {
        errors.push(super::errors::from_lalrpop(filemap, recovered.error));
        Term::Error(ByteSpan::new(start, end))
    },
};

AtomicLamParam: (Vec<(ByteIndex, String)>, Option<Box<Term>>) = {
    <name: IndexedIdent> => (vec![name], None),
    "(" <names: IndexedIdent+> <ann: (":" <PiTerm>)?> ")" => (names, ann.map(Box::new)),
};

RecordTypeField: RecordTypeField = {
    <_comment: "doc comment"*> <label: IndexedIdent> <binder: ("as" <IndexedIdent>)?> ":" <ann: Term> => {
        RecordTypeField { label, binder, ann }
    },
};

RecordField: RecordField = {
    <label: IndexedIdent> <shift: ("^" <"decimal literal">)?> => {
        RecordField::Punned { label, shift: shift.map(|x| x as u32) }
    },
    <label: IndexedIdent> <params: AtomicLamParam*> <return_ann: (":" <Term>)?> "=" <term: Term> => {
        let return_ann = return_ann.map(Box::new);
        RecordField::Explicit { label, params, return_ann, term }
    },
};

VariantTypeField: VariantTypeField = {
    <_comment: "doc comment"*> <label: IndexedIdent> ":" <ann: Term> => {
        VariantTypeField { label, ann }
    },
};

PatternArm: (Pattern, Term) = {
    <Pattern> "=>" <Term>,
};

IndexedIdent: (ByteIndex, String) = {
    <start: @L> <ident: Ident> => (start, ident),
};

Ident: String = {
    "identifier" => (<>).to_owned()
};
