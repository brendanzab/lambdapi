-- NOTE: Many of these functions could benefit from implicit arguments for
-- improved ergonomics. For example, the identity function could be written as:
--
-- ```
-- id : {a : Type} -> a -> a;
-- id x = x;
-- ```
--
-- This would then allow one to write:
--
-- ```
-- Pikelet> id "hello"
-- "hello" : String
-- ```

record {
    id; const; compose; flip;

    Unit; unit;

    Prod; Sum;

    Eq; eq;
    Eq-String; Eq-Char; Eq-Bool; Eq-Unit;
    Eq-U8; Eq-U16; Eq-U32; Eq-U64;
    Eq-S8; Eq-S16; Eq-S32; Eq-S64;
    Eq-F32; Eq-F64;

    Semigroup; append;
    Semigroup-String; Semigroup-Unit;
    Semigroup-U8-Add; Semigroup-U16-Add; Semigroup-U32-Add; Semigroup-U64-Add;
    Semigroup-S8-Add; Semigroup-S16-Add; Semigroup-S32-Add; Semigroup-S64-Add;
    Semigroup-F32-Add; Semigroup-F64-Add;
    Semigroup-U8-Mul; Semigroup-U16-Mul; Semigroup-U32-Mul; Semigroup-U64-Mul;
    Semigroup-S8-Mul; Semigroup-S16-Mul; Semigroup-S32-Mul; Semigroup-S64-Mul;
    Semigroup-F32-Mul; Semigroup-F64-Mul;

    Monoid; empty;
    Monoid-String; Monoid-Unit;
    Monoid-U8-Add; Monoid-U16-Add; Monoid-U32-Add; Monoid-U64-Add;
    Monoid-S8-Add; Monoid-S16-Add; Monoid-S32-Add; Monoid-S64-Add;
    Monoid-F32-Add; Monoid-F64-Add;
    Monoid-U8-Mul; Monoid-U16-Mul; Monoid-U32-Mul; Monoid-U64-Mul;
    Monoid-S8-Mul; Monoid-S16-Mul; Monoid-S32-Mul; Monoid-S64-Mul;
    Monoid-F32-Mul; Monoid-F64-Mul;

    Group;

    Num; add; zero; mul; one;
    Num-U8; Num-U16; Num-U32; Num-U64;
    Num-S8; Num-S16; Num-S32; Num-S64;
    Num-F32; Num-F64;

    Category;
    -- id;
    seq;
    -- compose;
    Category-Function;

    Functor; map;
    Endofunctor-Function;
} where {
    prim = import "prim";

    ||| The polymorphic identity function
    id : (a : Type) -> a -> a;
    id a x = x;

    ||| Creates a function that always returns the same value
    const : (a b : Type) -> a -> b -> a;
    const a b x y = x;

    ||| Function composition
    compose : (a b c : Type) -> (b -> c) -> (a -> b) -> (a -> c);
    compose a b c f g x = f (g x);

    ||| Flip the order of the first two arguments to a function
    flip : (a b c : Type) -> (a -> b -> c) -> (b -> a -> c);
    flip a b c f x y = f y x;


    ||| The unit type
    |||
    ||| This is a synonym for the empty record, and can be constructed using the
    ||| `unit` function.
    Unit : Type;
    Unit = Record {};

    ||| Create an element of the `Unit` type
    unit : Unit;
    unit = record {};


    ||| The void or 'uninhabited' type
    |||
    ||| It should never be possible to create anything of this type!
    Void : Type;
    Void = Data {};

    ||| We should never make a `Void`, so if we've got one, anything is possible!
    |||
    ||| This is known as the [_Principle of explosion_ or _ex falso quodlibet_]
    ||| (https://en.wikipedia.org/wiki/Principle_of_explosion).
    absurd : (A : Type) -> Void -> A;
    absurd _ void = case void {};


    ||| Option type
    |||
    ||| This can either be some value `A`, or nothing. We can use this to
    ||| represent data that may or may not be present. This is also known as
    ||| 'nullable' types in some languages.
    |||
    ||| ```
    ||| test-some : Option S32;
    ||| test-some = data { some = 1 };
    |||
    ||| test-none : Option S32;
    ||| test-none = data { none = unit };
    ||| ```
    Option : Type -> Type;
    Option A = Data {
        some : A;
        none : Unit;
    };


    ||| Dependent products
    Prod : (A : Type) (B : A -> Type) -> Type;
    Prod A B = (a : A) -> B a;

    ||| Dependent sums (subtypes)
    Sum : (A : Type) (B : A -> Type) -> Type;
    Sum A B = Record {
        val : A;
        proof : B val;
    };


    ||| Module for defining equality between two terms
    Eq (a : Type) = Record {
        ||| Compare two terms for equality
        eq : a -> a -> Bool;
    };

    ||| Compare two terms for equality
    eq : (a : Type) (EQ : Eq a) -> a -> a -> Bool;
    eq _ EQ = EQ.eq;

    Eq-String : Eq String = record { eq = prim.string.eq };
    Eq-Char : Eq Char = record { eq = prim.char.eq };
    Eq-Bool : Eq Bool = record { eq = prim.bool.eq };

    Eq-Unit : Eq Unit = record {
        eq x y = true;
    };

    Eq-U8 : Eq U8 = record { eq = prim.u8.eq };
    Eq-U16 : Eq U16 = record { eq = prim.u16.eq };
    Eq-U32 : Eq U32 = record { eq = prim.u32.eq };
    Eq-U64 : Eq U64 = record { eq = prim.u64.eq };
    Eq-S8 : Eq S8 = record { eq = prim.i8.eq };
    Eq-S16 : Eq S16 = record { eq = prim.i16.eq };
    Eq-S32 : Eq S32 = record { eq = prim.i32.eq };
    Eq-S64 : Eq S64 = record { eq = prim.i64.eq };
    Eq-F32 : Eq F32 = record { eq = prim.f32.eq };
    Eq-F64 : Eq F64 = record { eq = prim.f64.eq };


    ||| An associative operation on `a`.
    Semigroup (a : Type) = Record {
        ||| The associative operation
        append : a -> a -> a;

        -- TODO: Laws via property testing or proofs?
        -- append-assoc : (x y z : a) -> append x (append y z) = append (append x y) z
    };

    append : (a : Type) (S : Semigroup a) -> a -> a -> a;
    append _ S = S.append;


    Semigroup-String : Semigroup String = record { append = prim.string.append };

    Semigroup-Unit : Semigroup Unit = record {
        append x y = unit;
    };

    Semigroup-U8-Add : Semigroup U8 = record { append = prim.u8.add };
    Semigroup-U16-Add : Semigroup U16 = record { append = prim.u16.add };
    Semigroup-U32-Add : Semigroup U32 = record { append = prim.u32.add };
    Semigroup-U64-Add : Semigroup U64 = record { append = prim.u64.add };
    Semigroup-S8-Add : Semigroup S8 = record { append = prim.i8.add };
    Semigroup-S16-Add : Semigroup S16 = record { append = prim.i16.add };
    Semigroup-S32-Add : Semigroup S32 = record { append = prim.i32.add };
    Semigroup-S64-Add : Semigroup S64 = record { append = prim.i64.add };
    Semigroup-F32-Add : Semigroup F32 = record { append = prim.f32.add };
    Semigroup-F64-Add : Semigroup F64 = record { append = prim.f64.add };

    Semigroup-U8-Mul : Semigroup U8 = record { append = prim.u8.mul };
    Semigroup-U16-Mul : Semigroup U16 = record { append = prim.u16.mul };
    Semigroup-U32-Mul : Semigroup U32 = record { append = prim.u32.mul };
    Semigroup-U64-Mul : Semigroup U64 = record { append = prim.u64.mul };
    Semigroup-S8-Mul : Semigroup S8 = record { append = prim.i8.mul };
    Semigroup-S16-Mul : Semigroup S16 = record { append = prim.i16.mul };
    Semigroup-S32-Mul : Semigroup S32 = record { append = prim.i32.mul };
    Semigroup-S64-Mul : Semigroup S64 = record { append = prim.i64.mul };
    Semigroup-F32-Mul : Semigroup F32 = record { append = prim.f32.mul };
    Semigroup-F64-Mul : Semigroup F64 = record { append = prim.f64.mul };


    ||| A semigroup that also has an identity element.
    Monoid (a : Type) = Record {
        ||| The semigroup
        semigroup : Semigroup a;
        ||| The identity element of `semigroup.append`
        empty : a;

        -- TODO: Laws via property testing or proofs?
        -- append-empty : (x : a) -> semigroup.append x empty = x
        -- empty-append : (x : a) -> semigroup.append empty x = x
    };

    empty : (a : Type) (M : Monoid a) -> a;
    empty _ M = M.empty;


    Monoid-String : Monoid String = record { semigroup = Semigroup-String; empty = "" };

    Monoid-Unit : Monoid Unit = record {
        semigroup = Semigroup-Unit;
        empty = unit;
    };

    Monoid-U8-Add : Monoid U8 = record { semigroup = Semigroup-U8-Add; empty = 0 };
    Monoid-U16-Add : Monoid U16 = record { semigroup = Semigroup-U16-Add; empty = 0 };
    Monoid-U32-Add : Monoid U32 = record { semigroup = Semigroup-U32-Add; empty = 0 };
    Monoid-U64-Add : Monoid U64 = record { semigroup = Semigroup-U64-Add; empty = 0 };
    Monoid-S8-Add : Monoid S8 = record { semigroup = Semigroup-S8-Add; empty = 0 };
    Monoid-S16-Add : Monoid S16 = record { semigroup = Semigroup-S16-Add; empty = 0 };
    Monoid-S32-Add : Monoid S32 = record { semigroup = Semigroup-S32-Add; empty = 0 };
    Monoid-S64-Add : Monoid S64 = record { semigroup = Semigroup-S64-Add; empty = 0 };
    Monoid-F32-Add : Monoid F32 = record { semigroup = Semigroup-F32-Add; empty = 0 };
    Monoid-F64-Add : Monoid F64 = record { semigroup = Semigroup-F64-Add; empty = 0 };

    Monoid-U8-Mul : Monoid U8 = record { semigroup = Semigroup-U8-Mul; empty = 1 };
    Monoid-U16-Mul : Monoid U16 = record { semigroup = Semigroup-U16-Mul; empty = 1 };
    Monoid-U32-Mul : Monoid U32 = record { semigroup = Semigroup-U32-Mul; empty = 1 };
    Monoid-U64-Mul : Monoid U64 = record { semigroup = Semigroup-U64-Mul; empty = 1 };
    Monoid-S8-Mul : Monoid S8 = record { semigroup = Semigroup-S8-Mul; empty = 1 };
    Monoid-S16-Mul : Monoid S16 = record { semigroup = Semigroup-S16-Mul; empty = 1 };
    Monoid-S32-Mul : Monoid S32 = record { semigroup = Semigroup-S32-Mul; empty = 1 };
    Monoid-S64-Mul : Monoid S64 = record { semigroup = Semigroup-S64-Mul; empty = 1 };
    Monoid-F32-Mul : Monoid F32 = record { semigroup = Semigroup-F32-Mul; empty = 1 };
    Monoid-F64-Mul : Monoid F64 = record { semigroup = Semigroup-F64-Mul; empty = 1 };


    ||| A monoid that also has an inverse element.
    Group (a : Type) = Record {
        ||| The monoid
        monoid : Monoid a;
        ||| The inverse of `monoid.semigroup.append`
        inverse : a -> a;

        -- TODO: Laws via property testing or proofs?
        -- append-left-inverse : (a : Type) -> monoid.semigroup.append (inverse a) a = monoid.empty
    };


    ||| General trait for numeric types
    Num (a : Type) = Record {
        ||| The additive monoid
        add : Monoid a;
        ||| The multiplicative monoid
        mul : Monoid a;

        -- TODO: Subtraction?
        -- TODO: Division?
        -- TODO: Lawfulness?
    };

    add : (a : Type) (N : Num a) -> a -> a -> a;
    add a N = append a N.add.semigroup;

    zero : (a : Type) (N : Num a) -> a;
    zero a N = empty a N.add;

    mul : (a : Type) (N : Num a) -> a -> a -> a;
    mul a N = append a N.mul.semigroup;

    one : (a : Type) (N : Num a) -> a;
    one a N = empty a N.mul;


    Num-U8 : Num U8 = record { add = Monoid-U8-Add; mul = Monoid-U8-Mul };
    Num-U16 : Num U16 = record { add = Monoid-U16-Add; mul = Monoid-U16-Mul };
    Num-U32 : Num U32 = record { add = Monoid-U32-Add; mul = Monoid-U32-Mul };
    Num-U64 : Num U64 = record { add = Monoid-U64-Add; mul = Monoid-U64-Mul };
    Num-S8 : Num S8 = record { add = Monoid-S8-Add; mul = Monoid-S8-Mul };
    Num-S16 : Num S16 = record { add = Monoid-S16-Add; mul = Monoid-S16-Mul };
    Num-S32 : Num S32 = record { add = Monoid-S32-Add; mul = Monoid-S32-Mul };
    Num-S64 : Num S64 = record { add = Monoid-S64-Add; mul = Monoid-S64-Mul };
    Num-F32 : Num F32 = record { add = Monoid-F32-Add; mul = Monoid-F32-Mul };
    Num-F64 : Num F64 = record { add = Monoid-F64-Add; mul = Monoid-F64-Mul };


    ||| A category is a very general structure that provides a common way of composing
    ||| units of functionality
    |||
    ||| The most common category programmers would be familiar with would be `Type`s
    ||| are the objects, and the functions between those types are the arrows. Many
    ||| other categories exist though, for example:
    |||
    ||| - nodes in a directed graph, and the edges between those nodes.
    ||| - etc.
    Category = Record {
        ||| An object in the category
        Object : Type;
        ||| Arrows between the objects in the category
        Arrow : Object -> Object -> Type;
        ||| The identity arrow
        id : (a : Object) -> Arrow a a;
        ||| The sequencing of two arrows
        seq : (a b c : Object) -> Arrow a b -> Arrow b c -> Arrow a c;

        -- TODO: Laws via property testing or proofs?
        -- TODO: E-Category - ie. equivalence relation on morphisms?
        -- https://gist.github.com/brendanzab/9285eb8dfef5b6d6ccd87d90d6579590#gistcomment-2401643
        -- id-left : (a b : Object) (f : Arrow a b) -> seq id f = f;
        -- id-right : (a b : Object) (f : Arrow a b) -> seq f id = f;
        -- seq-assoc : (a b c d : Object) (f : Arrow a b) (g : Arrow b c) (h : Arrow c d) -> seq (seq f g) h = seq f (seq g h);
        -- seq-cong : (a b c : Object) (f0 f1 : Arrow a b) (g0 g1 : Arrow b c) (p : rel f0 f1) (q : g0 = g1) -> seq f0 g0 = seq f1 g1;
    };

    -- ||| The identity arrow
    -- id : (C : Category) (a : C.Object) -> C.Arrow a a;
    -- id C = C.id;

    ||| The sequencing of two arrows
    seq : (C : Category) (a b c : C.Object) -> C.Arrow a b -> C.Arrow b c -> C.Arrow a c;
    seq C = C.seq;

    -- ||| The composition of two arrows
    -- compose : (C : Category) (a b c : C.Object) -> C.Arrow b c -> C.Arrow a b -> C.Arrow a c;
    -- compose C a b c f g = seq C a b c g f;


    Category-Function : Category^1 = record {
        Object = Type;
        Arrow (a : Type) (b : Type) = a -> b;
        id (a : Type) (x : a) = x;
        seq (a b c : Type) (f : a -> b) (g : b -> c) (x : a) = g (f x);
    };


    ||| Provides a mapping from objects-to-objects and arrows-to-arrows for two
    ||| categories, `Source` and `Target`
    |||
    ||| Mappings can be anything from applying a function to each element of a
    ||| collection, to compiling a source language to a target language.
    |||
    ||| Haskell programmers might find this definition a little foreign - this
    ||| is because we use general categories in the definition, rather than
    ||| specializing it into the category of Pikelet functions
    Functor = Record {
        ||| The source category
        Source : Category;
        ||| The target category
        Target : Category;
        ||| Maps an object in `Source` to an object in `Target`
        Map : Source.Object -> Target.Object;
        ||| Maps an arrow in `Source` into an arrow in `Target`
        map : (a b : Source.Object) -> Source.Arrow a b -> Target.Arrow (Map a) (Map b);

        -- TODO: Laws via property testing or proofs?
    };

    ||| Maps an arrow in `F.Source` into an arrow in `F.Target`
    map : (F : Functor) (a b : F.Source.Object) -> F.Source.Arrow a b -> F.Target.Arrow (F.Map a) (F.Map b);
    map F = F.map;


    Endofunctor-Function : Functor^1 = record {
        Source = Category-Function;
        Target = Category-Function;
        Map x = x;
        map (a b : Type) (f : a -> b) (x : a) = f x;
    };
}
